{
    --------------------------------------------
    Filename: ADXL345-FreeFall-Demo.spin2
    Author: Jesse Burt
    Description: Demo of the ADXL345 driver
        Free-fall detection functionality (P2 version)
    Copyright (c) 2022
    Started Nov 12, 2021
    Updated Nov 5, 2022
    See end of file for terms of use.
    --------------------------------------------

    Build-time symbols supported by driver:
        -DADXL345_SPI
        -DADXL345_I2C (default if none specified)
}

CON

    _clkfreq    = cfg._clkfreq_def
    _xtlfreq    = cfg._xtlfreq

' -- User-modifiable constants
    LED         = cfg.LED1
    SER_BAUD    = 2_000_000

    { I2C configuration }
    SCL_PIN     = 0
    SDA_PIN     = 1
    I2C_FREQ    = 400_000                       ' max is 400_000
    ADDR_BITS   = 0                             ' 0, 1

    { SPI configuration }
    CS_PIN      = 0
    SCK_PIN     = 1                             ' SCL
    MOSI_PIN    = 2                             ' SDA
    MISO_PIN    = 3                             ' SDO
    SPI_FREQ    = 5_000_000                     ' max 5MHz
'   NOTE: If ADXL345_SPI is #defined, and MOSI_PIN and MISO_PIN are the same,
'   the driver will attempt to start in 3-wire SPI mode.

    INT1        = 15
' --

    DAT_X_COL   = 20
    DAT_Y_COL   = DAT_X_COL + 15
    DAT_Z_COL   = DAT_Y_COL + 15

OBJ

    cfg     : "boardcfg.p2eval"
    ser     : "com.serial.terminal.ansi"
    accel   : "sensor.accel.3dof.adxl345"

VAR

    long _isr_stack[50]                         ' stack for ISR core
    long _intflag                               ' interrupt flag

PUB main() | intsource

    setup()
    accel.preset_freefall()                     ' default settings, but enable
                                                ' sensors, set scale factors,
                                                ' and free-fall parameters

    ser.pos_xy(0, 3)
    ser.puts(@"Waiting for free-fall condition...")

    ' When the sensor detects free-fall, a message is displayed and
    '   is cleared after the user presses a key
    ' The preset for free-fall detection sets a free-fall threshold of
    '   0.315g's for a minimum time of 100ms. This can be tuned using
    '   accel.freefall_sethresh() and accel.freefall_set_time():
    accel.freefall_set_thresh(0_315000)         ' 0.315g's
    accel.freefall_set_time(100_000)            ' 100_000us/100ms

    repeat
        if (_intflag)                           ' interrupt triggered?
            intsource := accel.accel_int()      ' read & clear interrupt flags
            if (intsource & accel.INT_FFALL)    ' free-fall event?
                ser.pos_xy(0, 3)
                ser.puts(@"Sensor in free-fall!")
                ser.clear_line{}
                ser.newline{}
                ser.puts(@"Press any key to reset")
                ser.getchar()
                ser.pos_x(0)
                ser.clear_line()
                ser.pos_xy(0, 3)
                ser.puts(@"Sensor stable")
                ser.clear_line()

        if (ser.rx_check() == "c")              ' press the 'c' key in the demo
            calibrate()                         ' to calibrate sensor offsets
                                                ' (ensure sensor is level and
                                                ' chip package top faces up)

PRI calibrate()
' Calibrate sensor/set bias offsets
    ser.pos_xy(0, 7)
    ser.puts(@"Calibrating...")
    accel.calibrate_accel()
    ser.pos_x(0)
    ser.clear_line()

PRI cog_isr()
' Interrupt service routine
    pinl(cfg.LED1)                              ' LED off
    _intflag := 0
    repeat
        if pinr(INT1) == 1                      ' wait for INT1 (active high)
            pinh(cfg.LED1)                      ' light LED
            _intflag := 1                       ' set flag
        else
            pinl(cfg.LED1)                      ' LED off
            _intflag := 0                       ' clear flag

PUB setup()

    ser.start(SER_BAUD)
    waitms(30)
    ser.clear()
    ser.strln(@"Serial terminal started")

#ifdef ADXL345_SPI
    if (accel.startx(CS_PIN, SCK_PIN, MOSI_PIN, MISO_PIN))
#else
    if (accel.startx(SCL_PIN, SDA_PIN, I2C_FREQ, ADDR_BITS))
#endif
        ser.strln(@"ADXL345 driver started")
    else
        ser.strln(@"ADXL345 driver failed to start - halting")
        repeat

    cogspin(NEWCOG, cog_isr(), @_isr_stack)     ' start ISR in another core

DAT
{
Copyright 2022 Jesse Burt

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute,
sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT
OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}

